//===- ordered_set.dl -------------------------------------------*- C++ -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module defines two components:
ordered_set receives pred(Set,element) as input which defines
that element is in set.

ordered_set provides the predicates first, last and next
so the elements in one set can be 'iterated' in order.

Component forall_ordered_set extends ordered_set and
receives a property as an input and provides a predicate forall.
 -property(elem) indicates that elem has a certain property.
 -forall(set) indicates that all the elements in the set have such property.

*/

.comp ordered_set{

.decl pred(Set:number,element:number)
//.decl succ(Set:number,element1:number,element2:number)
.decl first(Set:number,Element:number)
.decl last(Set:number,Element:number)
.decl next(Set:number,Element:number,Element2:number)
      
/* succ(Set,A,B):-
	pred(Set,A),
	pred(Set,B),
    A<B. */

first(Set,A):-
	pred(Set,A),
    !next(Set,_,A).
	
last(Set,A):-
	pred(Set,A),
    !next(Set,A,_).
	
next(Set,A,B):-
	pred(Set,A),
    B=min D:{ pred(Set,A),pred(Set,D),D>A}.
	
}

.comp forall_ordered_set : ordered_set{

.decl property(Element:number)

.decl forall(Set:number)

forall(Set):-
	last(Set,EA),
	forall_accum(Set,EA).
	
.decl forall_accum(Set:number,Element:number)

forall_accum(Set,Element):-
	first(Set,Element),
	property(Element).
	
forall_accum(Set,Element):-
	forall_accum(Set,Prev),
	next(Set,Prev,Element),
	property(Element).

}
