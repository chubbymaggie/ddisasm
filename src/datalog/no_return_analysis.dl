//===- no_return_analysis.dl ------------------------------------*- C++ -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
 no_return and no_return_call are mutually recursive definitions
 that implement a must analysis that propagates over (potentially) the
 whole program.

 The analysis is a must analysis so it cannot propagate if there are jumps
 or calls that are not defined
 In order to propagate through SCC we need to compute their exits
 if none of their exits return, and the CFG is complete, the SCC never returns.
*/





.decl no_return(EA:address)
.output no_return

.decl no_return_call(EA:address)
.output no_return_call

.decl no_return_call_basic(EA:address)

#include "intra_procedural_SCC.dl"
#include "ordered_set.dl"

// initial seeds for the analysis
.decl no_return_function(Name:symbol)

no_return_function("exit").
no_return_function("_exit").
no_return_function("abort").
no_return_function("__stack_chk_fail").
no_return_function("__assert_fail").
no_return_function("longjump").

no_return_call_basic(EA):-
	direct_call(EA,Dest),
	plt_entry(Dest,Function),
	no_return_function(Function).

.init scc_ordered_exits=forall_ordered_set


.decl scc_no_return(SCC:address)

scc_ordered_exits.pred(Set,Elem):-
	scc_exit(Set,Elem).

// all the exits of the scc must be no_return	
scc_ordered_exits.property(Exit):-
	scc_ordered_exits.pred(_,Exit),
	no_return(Exit).

scc_no_return(SCC):-
    scc_ordered_exits.forall(SCC),
    scc_ordered_blocks.forall(SCC).
    //FIXME: require that the blocks in the scc are complete

.init scc_ordered_blocks=forall_ordered_set


scc_ordered_blocks.pred(SCC,SCC):-
	scc_representative(SCC).
scc_ordered_blocks.pred(SCC,Elem):-
	scc_representative(SCC),
	in_scc(SCC,Elem).

scc_ordered_blocks.property(Elem):-
	scc_ordered_blocks.pred(_,Elem),
	complete_block(Elem),
	!block_contains_ret(Elem).


.init resolved_jump_list=forall_ordered_set

resolved_jump_list.pred(Set,Elem):-
	resolved_jump(Set,Elem).

resolved_jump_list.property(EA):-
	resolved_jump_list.pred(_,EA),
	no_return(EA).
	
.decl no_return_resolved_jump(EA:address)

no_return_resolved_jump(Src):-
	resolved_jump_list.forall(Src).
	

/////////////////////////////////////////////////////////////////////

	
no_return(EA):-
	no_return_call(EA),
	code(EA).

no_return(EA):-
	no_return(Dest),
	direct_jump(EA,Dest),
	code(EA),
	!may_fallthrough(EA,_).


no_return(EA):-
	no_return(Next),
	may_fallthrough(EA,Next),
	code(EA),
	direct_jump(EA,Dest),
	no_return(Dest).


no_return(EA):-
	no_return(Next),
	may_fallthrough(EA,Next),
	code(EA),
	!direct_jump(EA,_),
	!reg_jump(EA),
	!indirect_jump(EA).

no_return(Block):-
	scc_no_return(SCC),
	in_scc(SCC,Block).
	
no_return(SCC):-
	scc_no_return(SCC).

no_return(EA):-
	no_return(Next),
	may_fallthrough(EA,Next),
	code(EA),
	no_return_resolved_jump(EA).

no_return(EA):-
	no_return_resolved_jump(EA),
	code(EA),
	!may_fallthrough(EA,_).

////////////////////////////////////////////////////////

no_return_call(EA):-
	no_return_call_basic(EA).

no_return_call(EA):-
	no_return(Dest),
	direct_call(EA,Dest),
	code(EA).

	
no_return_call(EA):-
	no_return(Dest),
	pc_relative_call(EA,Dest),
	code(EA).
