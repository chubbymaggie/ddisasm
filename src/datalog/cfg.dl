//===- cfg.dl ----------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module generates the control flow graph of the disassembled code
*/

.decl cfg_edge(src:address,dest:address,conditional:symbol,indirect:symbol,type:symbol)
.output cfg_edge

// edges whose destination we do not know
.decl cfg_edge_to_top(src:address,conditional:symbol,type:symbol)
.output cfg_edge_to_top

.decl cfg_edge_to_symbol(src:address,symbol:symbol)
.output cfg_edge_to_symbol

cfg_edge(Src,Dest,Conditional,Indirect,"branch"):-
    block_last_instruction(Src,EA),
	(
     direct_jump(EA,Dest), Indirect="false";
     pc_relative_jump(EA,Dest), Indirect="false";
     resolved_jump(EA,Dest), Indirect="true"
    ),
    refined_block(Dest),
    (
     unconditional_jump(EA),Conditional="false" ;
     !unconditional_jump(EA),Conditional="true"
    ).

cfg_edge(Src,Dest,"false","false","call"):-
    block_last_instruction(Src,EA),
    (
	direct_call(EA,Dest);
    pc_relative_call(EA,Dest)
    ),
    refined_block(Dest).

cfg_edge(Src,Dest,"false","false","fallthrough"):-
	block_last_instruction(Src,EA),
	may_fallthrough(EA,Dest),
	code_in_refined_block(Dest,Dest).

cfg_edge(ReturnBlock,NextBlock,"false","false","return"):-
    cfg_edge(Caller,Block,_,_,"call"),
    cfg_edge(Caller,NextBlock,_,_,"fallthrough"),
    in_function(Block,FunctionEntry),
    in_function(ReturnBlock,FunctionEntry),
    block_last_instruction(ReturnBlock,Insn),
    return(Insn).

cfg_edge_to_top(Src,Conditional,"branch"):-
    block_last_instruction(Src,EA),
    (
    reg_jump(EA);
    indirect_jump(EA)
    ),
    (
     unconditional_jump(EA),Conditional="false" ;
     !unconditional_jump(EA),Conditional="true"
    ).

cfg_edge_to_top(Src,"false","call"):-
	block_last_instruction(Src,EA),
    (
    reg_call(EA);
    indirect_call(EA)
    ).

cfg_edge_to_symbol(Src,Symbol):-
    block_last_instruction(Src,EA),
    plt_entry(EA,Symbol).