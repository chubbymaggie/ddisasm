//===- function_inference.dl ------------------------------------*- C++ -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
Function inference has two phases:

- The first one uses symbol information and heuristics.

- The second phase adds new functions by finding blocks of code that
 are contiguous (but not reachable) to a complete function. A
 complete function is a function that does not have unresolved jumps.

   - intra_procedural_cfg_completeness computes reachability
    and cfgs that are complete (all their jumps resolved)
    it uses the functions inferred in the first phase.

   - no_return_analysis helps detecting potential function end points.
*/

#include "no_return_analysis.dl"
#include "intra_procedural_cfg_completeness.dl"

.decl function_entry(EA:address)
.output function_entry
// very certain sources

function_entry(EA):-
	function_symbol(EA,_).

function_entry(EA):-
	main_function(EA).

function_entry(EA):-
	start_function(EA).

//called
function_entry(EA):-
	direct_call(EA_caller,EA),
	code(EA_caller),
	refined_block(EA).

//section start
function_entry(EA):-
	refined_block(EA),
	section(_,_,EA).


// pointer in special sections
function_entry(EA):-
	code_pointer_in_data(Src,EA),
	function_pointer_section(Name),
	section(Name,Size,Base),
	Src>=Base,
	Src < Base+Size.

// not referenced anywhere
function_entry(EA):-
	refined_block(EA),
	after_function_end(EA,_),
	!possible_target_from(EA,_),
	!symbolic_data(_,EA),
	typical_function_starter(EA).

// two consecutive elements in a table with typical function beginnings
function_entry(EA):-
	refined_block(EA),
	after_function_end(EA,_),
	!possible_target_from(EA,_),
	symbolic_data(Pointer,EA),
	typical_function_starter(EA),
	!resolved_jump(_,EA),

	symbolic_data(Pointer+8,EA2),EA2!=EA,
	after_function_end(EA2,_),
	typical_function_starter(EA2),
	!resolved_jump(_,EA2).

// the address is moved to a register
function_entry(EA):-
	refined_block(EA),
	after_function_end(EA,_),
	possible_target_from(EA,Src),
	code(Src),
	mov(Src).

// // reference from function table
function_entry(EA):-
	function_table(Label),
	preferred_data_access(Offset,Label),
	symbolic_data(Offset,EA),
	refined_block(EA),
	after_function_end(EA,_).

// // referenced from lonely pointer
function_entry(EA):-
	pointer_size(Pt_size),
	code_pointer_in_data(Offset,EA),
	after_function_end(EA,_),
	!code_pointer_in_data(Offset+Pt_size,_),
	!code_pointer_in_data(Offset-Pt_size,_).


// a compact function table (it is enough to determine one of the pointers is a function)
function_entry(EA2):-
	function_entry(EA),
	pointer_size(Pt_size),
	code_pointer_in_data(Offset,EA),
	code_pointer_in_data(Offset+Pt_size,EA2),
	!resolved_jump(_,EA2),
	after_function_end(EA2,_),
	!labeled_data(Offset+Pt_size).

function_entry(EA2):-
	function_entry(EA),
	pointer_size(Pt_size),
	code_pointer_in_data(Offset,EA),
	!labeled_data(Offset),
	code_pointer_in_data(Offset-Pt_size,EA2),
	!resolved_jump(_,EA2),
	after_function_end(EA2,_).

function_entry(EA2):-
	plt_data_reference(Offset),
	pointer_size(Pt_size),
	code_pointer_in_data(Offset+Pt_size,EA2),
	!resolved_jump(_,EA2),
	after_function_end(EA2,_),
	!labeled_data(Offset+Pt_size).

function_entry(EA2):-
	plt_data_reference(Offset),
	pointer_size(Pt_size),
	!labeled_data(Offset),
	code_pointer_in_data(Offset-Pt_size,EA2),
	!resolved_jump(_,EA2),
	after_function_end(EA2,_).


////////////////
//propagation: jumped from another function (there is a function boundary in between)
function_entry2(EA):-
	refined_block(EA),
	after_function_end(EA,_),
	direct_jump(Src,EA),
	unconditional_jump(Src),
	code(Src),
	function_entry(Middle),
	(
	Src>=Middle,Middle>EA
	;
	Src<Middle,Middle<=EA
	).

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// refinement using complete_cfg, reachability information and no_return information

 
.decl function_entry2(EA:address)
.output function_entry2

.decl in_function(EA:address,Function:address)
.output in_function

function_entry2(EA):-
	function_entry(EA).
	
function_entry2(EA):-
	in_function(Block,Function),
	Function<=Block,
	complete_cfg(Function),
	code_in_refined_block(End,Block),
	after_function_end(EA,End),
	
	refined_block(EA),
	!is_nop(EA),
	!resolved_jump(_,EA),
	//cannot be reached from before
	//!intra_reachable(Function,EA),
	EA<= min Y:reaches_segment(Y,EA),	
	//with this we want to avoid dead code missed by the compiler
	(
	instruction_get_operation(End,"CALL"),
	!intra_edge_dir(EA,_,"back"),
	!goes_back(EA,_,"cjump"),
	!unconditional_jump(EA)
	;
	!instruction_get_operation(End,"CALL")
	).


in_function(Block,Function):-
	function_entry2(Function),
	intra_reachable(Function,Block).

//we repeat the propagation in the data sections

function_entry2(EA2):-
	function_entry2(EA),
	pointer_size(Pt_size),
	code_pointer_in_data(Offset,EA),
	code_pointer_in_data(Offset+Pt_size,EA2),
	!resolved_jump(_,EA2),
	after_function_end(EA2,_),
	!labeled_data(Offset+Pt_size).

function_entry2(EA2):-
	function_entry2(EA),
	pointer_size(Pt_size),
	code_pointer_in_data(Offset,EA),
	!labeled_data(Offset),
	code_pointer_in_data(Offset-Pt_size,EA2),
	!resolved_jump(_,EA2),
	after_function_end(EA2,_).

//////////////////////////////////////////////////////////////////////////////
// auxiliary predicates
.decl function_table(Label:address)

function_table(Label):-
	pointer_size(Pt_size),
	data_access_pattern(Label,Pt_size,Mult,Origin),
	(
		instruction_get_operation(Origin,"CALL")
	;
		Mult>Pt_size,
		!unconditional_jump(Origin)
	),
	preferred_data_access(Offset,Label),
	symbolic_data(Offset,EA),
	refined_block(EA).

//////////////////////////////////////////////////////////////////////////////
// heuristic markers
.decl function_pointer_section(Name:symbol)

function_pointer_section(".init_array").
function_pointer_section(".fini_array").
function_pointer_section(".got.plt").



.decl typical_function_starter(EA:address)

// typical_function_starter(EA):-
// 	instruction(EA,_,_,"PUSH",_,_,_,_).

typical_function_starter(EA):-
	instruction(EA,_,_,"SUB",Op1,Op2,_,_),
	op_immediate(Op1,_),
	op_regdirect(Op2,"RSP").
	
typical_function_starter(EA):-
	instruction(EA,_,_,"PUSH",Op1,_,_,_),
 	op_regdirect(Op1,"RBP").
	
//////////////////////////////////////////////////////////////////////////////
// functions can start after a block that does not fallthrough

.decl after_function_end(EA:address,End:address)

after_function_end(Next,End):-
	code(End),
	function_end(End),
	next(End,Next).


after_function_end(Next,End):-
	after_function_end(EA,End),
	is_nop(EA),
	next(EA,Next).

.decl function_end(EA:address)

function_end(EA):-
	return(EA).

function_end(EA):-
	unconditional_jump(EA).
	
function_end(EA):-
	halt(EA).	

function_end(EA):-
	no_return_call(EA).
