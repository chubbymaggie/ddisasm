//===- intra_procedural_SCC.dl ----------------------------------*- C++ -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
Compute strongly connected components of an intra-procedural
control flow graph.

in_scc(block1,block2): represents that block2 and block2 belong to the
same SCC.

single_scc(block): represents a SCC with only one block but that is
nonetheless recursive

scc_representative(block): Each SCC can contain a number of blocks. We
identify a SCC by the id of its first block.

scc_exit(SCC,exit_block): There is an edge in the control flow graph
from one of the nodes in SCC to exit_block.  That is, exit_block is an
exit point of the SCC.
*/


.decl scc_representative(Block:address)
.decl scc_exit(SCC:address,Exit_block:address)


.decl intra_reachable_initial(Block:address,Function:address)

intra_reachable_initial(Block,Block):-
	refined_block(Block).
	
intra_reachable_initial(Src,Dest):-
	intra_reachable_initial(Src,A),
	intra_edge_initial(A,Dest).
	

.decl intra_edge_initial(Block_src:address,Block_dest:address)

intra_edge_initial(Src,Dest):-
	code_in_refined_block(EA,Src),
	direct_jump(EA,Dest).

intra_edge_initial(Src,Dest):-
	code_in_refined_block(EA,Src),
	pc_relative_jump(EA,Dest).
	
intra_edge_initial(Src,Dest):-
	code_in_refined_block(EA,Src),
	may_fallthrough(EA,Dest),
	code_in_refined_block(Dest,Dest).

intra_edge_initial(Src,Dest):-
	code_in_refined_block(EA,Src),
	resolved_jump(EA,Dest).



////////////////////////////////////////////////////////////////////////////////

.decl in_scc(Block1:address,Block2:address)
.output in_scc

in_scc(Block1,Block2):-
	intra_reachable_initial(Block1,Block2),
	intra_reachable_initial(Block2,Block1),
	Block1<Block2.

.decl single_scc(Block:address)

single_scc(Block):-
	intra_edge_initial(Block,Block),
	!in_scc(Block,_),
	!in_scc(_,Block).
	
scc_representative(Block):-
	in_scc(Block,_),
	!in_scc(_,Block).
	
scc_representative(Block):-
	single_scc(Block).	



scc_exit(SCC,Exit_block):-
	scc_representative(SCC),
	in_scc(SCC,Block),
	intra_edge_initial(Block,Exit_block),
	!in_scc(SCC,Exit_block),
	Exit_block!= SCC.
	
scc_exit(SCC,Exit_block):-
	scc_representative(SCC),
	intra_edge_initial(SCC,Exit_block),
	!in_scc(SCC,Exit_block),
	Exit_block!= SCC.
