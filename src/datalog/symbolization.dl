//===- symbolization.dl -----------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module performs symbolization.
It uses the results of several analysis:
 -use_def
 -value
 -data_access

Part of symbolization is pointer reatribution, that is detecting cases
where a number is the result of a symbol+constant. This is done in an
independent module 'pointer_reatribution' which also uses the results
of these analyses.

The data symbolization itself uses the following heuristics:

  - address_array: whether we have potential symbols evenly
    spaced. The more symbols the less likely they are all value
    collisions. We require at least 3 symbols evenly spaced to
    consider it an array.

  - preferred_data_access and data_access_patterns (from the data_access analysis):
    - if an address is accessed with the size of the pointer, it is more likely to be a pointer.
    - if an address is accessed with a size other than the size of the pointers, it is almost
      certainly not a pointer.

  - strings: if we have a pointer candidate in what seems to be a string,
    it is less likely to be a pointer.

  - aligned location: if a pointer candidate is aligned, it is more
    likely to be a pointer. Compilers usually (but not always) store
    pointers aligned.

This module also computes and symbol_minus_symbol.
*/

#include "empty_range.dl"
#include "use_def_analysis.dl"
#include "value_analysis.dl"
#include "data_access_analysis.dl" // data_access_analysis uses predicates from here
#include "pointer_reatribution.dl"

.decl symbolic_operand(ea:address,index:operand_index)
.output symbolic_operand

.decl symbolic_data(ea:address,value:address)
.output symbolic_data

.decl symbol_minus_symbol_candidate(ea:address,symbol1:address,symbol2:address)

.decl symbol_minus_symbol(ea:address,symbol1:address,symbol2:address)
.output symbol_minus_symbol

// symbolic data that points to code
.decl code_pointer_in_data(EA:address,Val:address)

// data that is dereferenced somewhere in the code
.decl labeled_data(ea:address)
.output labeled_data

// labels of un-initialized data
.decl bss_data(ea:address)
.output bss_data

// string
.decl string_candidate(ea:address,end:address)

.decl string(ea:address,end:address)
.output string

////////////////////////////////////////////////////////////////////////
symbol_minus_symbol_candidate(EA,EA,Symbol2):-
	data_access_pattern(EA,4,4,_Ref),
	relative_address(EA,EA,Symbol2),
	block(Symbol2),
	relative_address(EA+4,EA,Symbol3),
	block(Symbol3).

// more permissive symbol_minus_symbol_candidate starting point
symbol_minus_symbol_candidate(EA,EA,Symbol2):-
	relative_address(EA,EA,Symbol1),
	block(Symbol1),
	relative_address(EA+4,EA,Symbol2),
  !preferred_data_access(EA+4,_),
  block(Symbol2),
  relative_address(EA+8,EA,Symbol3),
  !preferred_data_access(EA+8,_),
	block(Symbol3).
 
	
symbol_minus_symbol_candidate(EA,EA_ref,Symbol2):-
	symbol_minus_symbol_candidate(EA_label,EA_ref,_),
	preferred_data_access(EA,EA_label),
	relative_address(EA,EA_ref,Symbol2),
	block(Symbol2).

//more permissive symbol_minus_symbol_candidate propagation
symbol_minus_symbol_candidate(EA+4,EA_ref,Symbol):-
	symbol_minus_symbol_candidate(EA,EA_ref,_),
  relative_address(EA+4,EA_ref,Symbol),
	!preferred_data_access(EA+4,_),
	block(Symbol).
////////////////////////////////////////////////////////////////////////
// address_in_data considers anything that points to the code region
// this refinement restricts that to the beginning of the final blocks
.decl address_in_data_refined(EA:address,Val:number)

address_in_data_refined(EA,Val):-
      binary_type("DYN"),
      address_in_data(EA,Val),
      relocation(EA,_,_,_),
      data_section(Name),
      section(Name,Size,Beg),
      Val>=Beg,
      Val<=Size+Beg.

address_in_data_refined(EA,Val):-
      binary_type("DYN"),
      address_in_data(EA,Val),
      relocation(EA,_,_,_),
      block(Val).

address_in_data_refined(EA,Val):-
      binary_type("EXEC"),
      address_in_data(EA,Val),
      data_section(Name),
      section(Name,Size,Beg),
      Val>=Beg,
      Val<=Size+Beg.
      
address_in_data_refined(EA,Val):-
      binary_type("EXEC"),
      address_in_data(EA,Val),
      block(Val).


.init address_in_data_refined_range=empty_range

address_in_data_refined_range.in_ea(EA):-
	address_in_data_refined(EA,_).
	
////////////////////////////////////////////////////////////////////////////////////
// candidates of symbolic values in the code
// symbolic_code_operand_candidate points to code
// symbolic_data_operand_candidate points to data

.decl symbolic_code_operand_candidate(ea:address,operand_index:number,Dest:address)
.decl symbolic_data_operand_candidate(ea:address,operand_index:number,Dest:address)

symbolic_code_operand_candidate(EA,Op_index,Dest):-
	code(EA),
	instruction_get_op(EA,Op_index,Op),
	(
		can_have_symbolic(EA),
		op_immediate(Op,Dest)
	;
		pc_relative_operand(EA,Op_index,Dest)
	;
		can_have_symbolic(EA),
	        op_indirect(Op,_,_,_,_,Dest,_Size)
	),
	code(Dest).
	

symbolic_data_operand_candidate(EA,Op_index,Dest):-
	code(EA),
	instruction_get_op(EA,Op_index,Op),
	(
		can_have_symbolic(EA),
		op_immediate(Op,Dest)
	;
		pc_relative_operand(EA,Op_index,Dest)
	;
		can_have_symbolic(EA),
   	        op_indirect(Op,_,_,_,_Multiplier,Dest,_Size)
	),
	data_section(Name),
	section(Name,SizeSect,Base),
	Dest>=Base,
	Dest<=Base+SizeSect.
///////////////////////////////
// label candidates before moving
.decl labeled_data_candidate(EA:address)

labeled_data_candidate(EA):-
	symbol(EA,_,_,_,_,_).

labeled_data_candidate(EA):-
	symbolic_data_operand_candidate(_,_,EA).

labeled_data_candidate(Val):-
	address_in_data_refined(_,Val).

/////////////////////////////////////////////////////////////////////////////////
// Detect strings
string_candidate(Beg,End+1):-
	data_byte(End,0),
	string_part(End-1,Beg),
	!labeled_data_candidate(End).


.decl string_part(ea:address,base:address)

string_part(EA,EA):-
    preferred_data_access(EA,_),
    data_byte(EA,Byte),
    printable_char(Byte).

string_part(EA,EA):-
    labeled_data_candidate(EA),
    data_byte(EA,Byte),
    printable_char(Byte).

string_part(EA+1,Base):-
   string_part(EA,Base),
   data_byte(EA+1,Byte),
	 !labeled_data_candidate(EA+1),
   printable_char(Byte).

///////////////////////////////////////////////////////////////////////////
.decl data_object_candidate(ea:address,size:number,type:symbol)

.decl data_object_point(ea:address,size:number,type:symbol,points:number,why:symbol)
.output data_object_point

.decl data_object_conflict(ea:address,size:number,type:symbol,ea2:address,size2:number,type2:symbol)
.output data_object_conflict

.decl discarded_data_object(ea:address,size:number,type:symbol)

.decl data_object(ea:address,size:number,type:symbol)

data_object_candidate(EA,4,"symbol-symbol"):-
	symbol_minus_symbol_candidate(EA,_,_).

data_object_candidate(EA,Pt_size,"symbol"):-
	pointer_size(Pt_size),
	address_in_data_refined(EA,_).

data_object_candidate(EA,Size,"string"):-
	string_candidate(EA,End),
	Size=End-EA.

data_object_candidate(EA,Size,"other"):-
  preferred_data_access(EA,Label),
	data_access_pattern(Label,Size,_,_),
	Size!=Pt_size,
	pointer_size(Pt_size).

///////////////////////////////////////////////////////////////////////////////////////////
// Heuristic: If there are at least 3 consecutive addresses
//  we consider that we found an array of addresses
// we do not cross labels
.decl after_address_in_data(EA:address,EA_next:address)

after_address_in_data(EA,EA+Pt_size):-
	address_in_data_refined(EA,_),
	pointer_size(Pt_size),
	data_byte(EA+Pt_size,_),
  !labeled_data_candidate(EA+Pt_size).
	
after_address_in_data(EA,EA_aux+1):-
	after_address_in_data(EA,EA_aux),
	!address_in_data_refined(EA_aux,_),
	data_byte(EA_aux+1,_),
	!labeled_data_candidate(EA_aux+1).

.decl next_address_in_data(EA:address,EA_next:address)


next_address_in_data(EA,EA_next):-
	address_in_data_refined(EA,_),
	after_address_in_data(EA,EA_next),
	address_in_data_refined(EA_next,_).


.decl address_array_aux(EA:address,Distance:number)

address_array_aux(EA,Diff):-
	address_in_data_refined(EA,_),
	pointer_size(Pt_size),
	EA % Pt_size =0,
	next_address_in_data(EA,EA_next),
	Diff= EA_next-EA,
	address_in_data_refined(EA+Diff,_),
	next_address_in_data(EA+Diff,EA+(2*Diff)).
	
address_array_aux(EA+Diff,Diff):-
	address_array_aux(EA,Diff),
	next_address_in_data(EA,EA+Diff).
	
.decl address_array(EA:address)

address_array(EA):-
	address_array_aux(EA,_).
	
.init address_array_range=empty_range

address_array_range.in_ea(EA):-
	address_array(EA).


//////////////////////////////////////////////////////////////////////////////////
// Final decision on symbolization

//FIXME maybe we have to refine this (are there false positives?)
symbolic_operand(EA,Op_index):-
	symbolic_code_operand_candidate(EA,Op_index,_).
symbolic_operand(EA,Op_index):-
	symbolic_data_operand_candidate(EA,Op_index,_).	

data_object_point(EA,4,"symbol-symbol",4,"basic point"):-
	data_object_candidate(EA,4,"symbol-symbol").

data_object_point(EA,Pt_size,"symbol",0,"basic point"):-
  data_object_candidate(EA,Pt_size,"symbol").

// Pointer array heuristic
data_object_point(EA,Pt_size,"symbol",3,"pointer array"):-
  data_object_candidate(EA,Pt_size,"symbol"),
	address_array(EA).

// data access heuristic
data_object_point(EA,Pt_size,"symbol",5,"data access"):-
  data_object_candidate(EA,Pt_size,"symbol"),
	preferred_data_access(EA,Label),
	(
	data_access_pattern(Label,Pt_size,_,_)
	;
	data_access_pattern(Label,0,_,_)	
	).

data_object_point(EA,Pt_size,"symbol",1,"no label conflicts"):-
  data_object_candidate(EA,Pt_size,"symbol"),
 	!labeled_data_candidate(EA+1),
	!labeled_data_candidate(EA+2),
	!labeled_data_candidate(EA+3),
	!labeled_data_candidate(EA+4),
	!labeled_data_candidate(EA+5),
	!labeled_data_candidate(EA+6),
	!labeled_data_candidate(EA+7).

data_object_point(EA,Pt_size,"symbol",2,"aligned"):-
  data_object_candidate(EA,Pt_size,"symbol"),
	EA % Pt_size =0.


data_object_point(EA,Size,"string",0,"basic point"):-
	data_object_candidate(EA,Size,"string").

//extra point if the string is long
data_object_point(EA,Size,"string",1,"long string"):-
	data_object_candidate(EA,Size,"string"),
	Size>8.

data_object_point(EA,Size,"string",2,"very long string"):-
	data_object_candidate(EA,Size,"string"),
	Size>16.


// data access negative heuristic
data_object_point(EA,Size,"other",4,"data access"):-
  data_object_candidate(EA,Size,"other"),
	Size<16.

//sometimes we load pointers into xmm
data_object_point(EA,Size,"other",1,"data access"):-
  data_object_candidate(EA,Size,"other"),
	Size>=16.

//range mismatch
data_object_conflict(EA,Size,Type,EA2,Size2,Type2):-
	data_object_candidate(EA,Size,Type),
  data_object_candidate(EA2,Size2,Type2),
	EA2>EA,
	EA2<EA+Size.

//size mismatch
data_object_conflict(EA,Size,Type,EA,Size2,Type2):-
	data_object_candidate(EA,Size,Type),
  data_object_candidate(EA,Size2,Type2),
	Size2>Size.

//type mismatch
data_object_conflict(EA,Size,Type,EA,Size,Type2):-
	data_object_candidate(EA,Size,Type),
  data_object_candidate(EA,Size,Type2),
	Type!=Type2.


data_object(EA,Size,Type):-
  data_object_candidate(EA,Size,Type),
	!discarded_data_object(EA,Size,Type),
	(sum X:{data_object_point(EA,Size,Type,X,_)} >=2
	; //if the object is a string and there is no conflict we keep it no matter the evidence
	Type="string"
	).

discarded_data_object(EA_f,Size_f,Type_f):-
  data_object_conflict(EA,Size,Type,EA2,Size2,Type2),
	Points1=sum X:{data_object_point(EA,Size,Type,X,_)},
	Points2=sum Y:{data_object_point(EA2,Size2,Type2,Y,_)},
  (
		Points1<Points2,
		EA_f=EA,
		Size_f=Size,
		Type_f=Type
	;
		Points1>Points2,
		EA_f=EA2,
		Size_f=Size2,
		Type_f=Type2
	).


// predicates to export

symbolic_data(EA,Val):-
	data_object(EA,_,"symbol"),
  address_in_data_refined(EA,Val).

string(EA,End):-
	data_object(EA,Size,"string"),
	string_candidate(EA,End),
	Size=End-EA.

symbol_minus_symbol(EA,Symbol1,Symbol2):-
	data_object(EA,4,"symbol-symbol"),
	symbol_minus_symbol_candidate(EA,Symbol1,Symbol2).

code_pointer_in_data(EA,Val):-
	symbolic_data(EA,Val),
	block(Val).

///////////////////////////////////////////////////////////////////////////////////////////
// Final label decision

labeled_data(EA):-
	symbol(EA,_,_,_,_,_).

labeled_data(EA):-
	symbolic_data_operand_candidate(Src,_,EA),
	!moved_label(Src,_,EA,_).

labeled_data(EA):-
	address_in_data_refined(Src,EA),
	!moved_data_label(Src,EA,_).

labeled_data(EA_moved):-
	moved_label(_,_,_,EA_moved).
	
labeled_data(New_dest):-
	moved_data_label(_,_,New_dest).

labeled_data(EA):-
	symbol_minus_symbol(EA,EA,_).
/////////////////////////////////////////////////////////////////////////////////
// This facts specifies that a label should be printed in the .bss section for
// the given address (because it is referenced somewhere)
bss_data(EA):-
	labeled_data(EA),
	section(".bss",SizeSect,Base),
	EA>=Base,
	EA<=Base+SizeSect.