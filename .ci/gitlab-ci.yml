variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'

stages:
  - check-format
  - build
  - test-and-tag-ubuntu16
  - test-and-tag-ubuntu18
  - cleanup

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .

.build-template: &build
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - git clone https://git.grammatech.com/rewriting/gtirb-pprinter.git
    - docker build -f .ci/Dockerfile.$OS -t ${LOCAL_IMAGE_NAME}-${OS} .

build-ubuntu16:
  stage: build
  variables:
    OS: 'ubuntu16'
  <<: *build

build-ubuntu18:
  stage: build
  variables:
    OS: 'ubuntu18'
  <<: *build

build-arch:
  stage: build
  variables:
    OS: 'arch'
  <<: *build

run-ubuntu16:
  stage: test-and-tag-ubuntu16
  variables:
    OS: 'ubuntu16'
  script:
    - docker run  --cpus=8 ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c \
      "cd tests/ && ./test_small.sh && ./test_small.sh -strip && ./test_assembler_examples.sh -strip"
    - if [ "$CI_BUILD_REF_NAME" == "master" ] && [ "$OS" == "ubuntu16" ];
      then
        docker tag ${LOCAL_IMAGE_NAME}-${OS} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}:latest;
        docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
        docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}:latest;
      fi

run-ubuntu18:
  stage: test-and-tag-ubuntu18
  variables:
    OS: 'ubuntu18'
  script:
    - docker run --cpus=8 ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c \
      "cd tests/ && ./test_small.sh && ./test_small.sh -strip && ./test_assembler_examples.sh -strip"

cleanup-ubuntu16:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}

cleanup-ubuntu18:
  stage: cleanup
  variables:
    OS: 'ubuntu18'
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}

cleanup-arch:
  stage: cleanup
  variables:
    OS: 'arch'
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}

# build-arch:
#   stage: build-deploy-cleanup
#   variables:
#     OS: 'arch'
#   <<: *build
